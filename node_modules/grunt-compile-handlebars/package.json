{
  "name": "grunt-compile-handlebars",
  "description": "Compile handlebar templates, outputting static HTML",
  "version": "0.7.5",
  "homepage": "https://github.com/patrickkettner/grunt-compile-handlebars",
  "author": {
    "name": "Patrick Kettner",
    "email": "patrick@patrickkettner.com",
    "url": "https://github.com/patrickkettner"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/patrickkettner/grunt-compile-handlebars.git"
  },
  "bugs": {
    "url": "https://github.com/patrickkettner/grunt-compile-handlebars/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/patrickkettner/grunt-compile-handlebars/blob/master/LICENSE-MIT"
    }
  ],
  "main": "grunt.js",
  "bin": {
    "grunt-compile-handlebars": "bin/grunt-compile-handlebars"
  },
  "engines": {
    "node": "*>= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.2.0",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "dependencies": {
    "handlebars": ">= 1",
    "lodash.merge": ">= 2"
  },
  "keywords": [
    "gruntplugin",
    "handlebars"
  ],
  "readme": "# grunt-compile-handlebars [![Build Status](https://secure.travis-ci.org/patrickkettner/grunt-compile-handlebars.png?branch=master)](http://travis-ci.org/patrickkettner/grunt-compile-handlebars)\n\nCompiles handlebar templates, outputs static HTML\n\n## Getting Started\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-compile-handlebars`\n\nThen add this line to your project's `Gruntfile.js` gruntfile:\n\n```javascript\ngrunt.loadNpmTasks('grunt-compile-handlebars');\n```\n\n[grunt]: https://github.com/gruntjs/grunt\n[getting_started]: https://github.com/gruntjs/grunt/blob/master/docs/getting_started.md\n\n## Documentation\n### Who\npatrick kettner - a web developer who consistently worked with large static data sets.\n\n### What\ngrunt-compile-handlebars takes in a handlebars tempalte (and optionally static pre and post html), runs a dataset over it, and outputs static html.\n\n### Where\ninside of a grunt task. I assume you know what gruntjs is, but if not - [gruntjs.com](http://gruntjs.com)\n\n### When\nYou have ton of data that rarely changes that you want to template.\n\n### How\nThere are a lot of different ways to input data, it accepts most any dynamic and static\ninput.\nHeres a few of the ways you can use it\n\n```javascript\n'compile-handlebars': {\n    allStatic: {\n      preHTML: 'test/fixtures/pre-dev.html',\n      postHTML: 'test/fixtures/post-dev.html',\n      template: 'test/fixtures/template.handlebars',\n      templateData: 'test/fixtures/data.json',\n      output: 'tmp/allStatic.html'\n    },\n    dynamicTemplate: {\n      template: '<h1>{{salutation}}{{punctuation}} {{location}}</h1>',\n      templateData: 'test/fixtures/data.json',\n      output: 'tmp/dynamicTemplate.html'\n    },\n    dynamicTemplateData: {\n      template: 'test/fixtures/template.handlebars',\n      templateData: {\n          \"salutation\": \"Hallo\",\n          \"punctuation\": \",\",\n          \"location\": \"Welt\"\n      },\n      output: 'tmp/dynamicTemplateData.html'\n    },\n    dynamicPre: {\n      preHTML: '<header>INLINE HEADER</header>',\n      template: 'test/fixtures/template.handlebars',\n      templateData: 'test/fixtures/data.json',\n      output: 'tmp/dynamicPre.html'\n    },\n    dynamicPost: {\n      postHTML: '<footer>INLINE HEADER</footer>',\n      template: 'test/fixtures/template.handlebars',\n      templateData: 'test/fixtures/data.json',\n      output: 'tmp/dynamicPost.html'\n    },\n    allArray: {\n      template: ['test/fixtures/deep/spanish.handlebars', 'test/fixtures/deep/deeper/portuguese.handlebars'],\n      templateData: ['test/fixtures/deep/spanish.handlebars', 'test/fixtures/deep/deeper/portuguese.json'],\n      output: ['tmp/deep/spanish.html','tmp/deep/deeper/portuguese.html'],\n      helpers: ['test/helpers/super_helper.js'],\n      partials: ['test/fixtures/deep/shared/foo.handlebars']\n   },\n    globbedTemplateAndOutput: {\n      template: 'test/fixtures/deep/**/*.handlebars',\n      templateData: 'test/fixtures/deep/**/*.json',\n      output: 'tmp/deep/**/*.html'\n    },\n    globalJsonGlobbedTemplate: {\n      template: 'test/fixtures/deep/**/*.handlebars',\n      templateData: 'test/fixtures/deep/**/*.json',\n      output: 'tmp/deep/**/*.html',\n      helpers: 'test/helpers/**/*.js',\n      partials: 'test/fixtures/deep/shared/**/*.handlebars',\n      globals: [\n        'test/globals/info.json',\n        'test/globals/textspec.json'\n      ]\n    }\n}\n```\n\nThe available configuration options are as follows\n\nUnless otherwise noted, all configurable values can be represented as\n* a string representing the path to a specific file\n* a string representing the path to a [globbed representation](http://gruntjs.com/api/grunt.file#globbing-patterns) of the files, matched up against the values resolved from the `template` configuration\n* an array of literal paths, globbed paths, or a combination of the two\n\n__`template`__ - The template fed to handlebars. In addition to the normal configurable values, it can also be an inline string representation of a template (e.g. raw html and handlebars).\n\n__`preHTML`__ - Static text to be inserted before the compiled template\n__`postHTML`__ - Static text to be inserted after the compiled template\n\n__`templateData` ~~ The data being fed to compiled template, in addition to the normal configurable values, this can be\n* an inline string representation of a data (I don't know why you would do that though, when you can do...)\n* an inline JSON representation of a data\n\n__`output`__ - the file(s) that handlebars saves the files to. This can be\n__`globals`__ - globals that can be included, useful for when you have template specific data, but want some data available to all templates\n__`helpers`__ - handlebars helpers\n__`partials`__ - handlebars partials\n\n__`registerFullPath`__ - normally, helpers and partials are registered under their basename, rather than their path (e.g. partial at `partials/deep/awesomePartial.handlebars` is registered as `{{> awesomePartial}}`). When set to `true`, helpers and partials are registered under their full paths (e.g. {{> partials/deep/awesomePartial}}), to prevent clobbering after resolving globbed values.\n\n\n#### A note on globing\n\nWhen you specify templates using globs, the values from `template` are used to create the values for output, for example, if your file structure looks like this\n\n```\n|-foo\n  |-bar.handlebars\n  |-baz.handlebars\n  |-bar.json\n  |-baz.json\n```\n\nand your configuration looks like this\n\n```JSON\n{\n  \"template\": \"./foo/*.handlebars\",\n  \"templateData\": \"./foo/*.json\",\n  \"output\":  \"./foo/*.html\"\n}\n```\n\nthe output would be `./foo/bar.html` and `./foo/baz.html`\n\n\n### Why\nI had to work with several hundred repeated data structures that never changed. Keeping them all in html was silly, but pushing out a template engine for the end user to compile the same information multiple times was even sillier. This allows you to have your templated cake and eat it too.\n\n## Release History\n * 0.7.5 - Redford - add `registerFullPath` option to prevent partial/helper registration clobbering, update README\n * 0.7.4 - M. Jean - don't send objects to handlebars.compile, code cleanup\n * 0.7.3 - Cousin Ben - switch from require to readFile to allow for html in partials\n * 0.7.2 - Bernice - @stimmins improved handling of templateData and globals\n * 0.7.1 - Margaret - fix 0.8 compatibility\n * 0.7.0 - Rosemary - Allow for arrays instead of globbing, remove depreicated grunt methods\n * 0.6.3 - Pel√©  - @mattcg fixed an issue with large amounts of templates\n * 0.6.2 - Dignan  - @goette added support for a global json config\n * 0.6.1 - Grace  - @robinqu added support for handlebars partials\n * 0.6.0 - Future Man - added globbing, lots more test\n * 0.4.0 - Oseary - upgraded to grunt 0.4, removed extra tasks, added tests\n * 0.0.2 - Inez - changed to grunt's native json parser (thanks to @sebslomski). Updated Readme\n * 0.0.1 - Dudley - Initial commit\n\n## License\nCopyright (c) 2014 Patrick Kettner\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-compile-handlebars@0.7.5",
  "_from": "grunt-compile-handlebars@~0.7.5"
}
